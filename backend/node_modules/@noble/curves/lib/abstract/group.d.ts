export interface Group<T extends Group<T>> {
    double(): T;
    negate(): T;
    add(other: T): T;
    subtract(other: T): T;
    equals(other: T): boolean;
    multiply(scalar: number | bigint): T;
}
export declare type GroupConstructor<T> = {
    BASE: T;
    ZERO: T;
};
export declare function wNAF<T extends Group<T>>(c: GroupConstructor<T>, bits: number): {
    constTimeNegate: (condition: boolean, item: T) => T;
    unsafeLadder(elm: T, n: bigint): T;
    /**
     * Creates a wNAF precomputation window. Used for caching.
     * Default window size is set by `utils.precompute()` and is equal to 8.
     * Which means we are caching 65536 points: 256 points for every bit from 0 to 256.
     * @returns 65K precomputed points, depending on W
     */
    precomputeWindow(elm: T, W: number): Group<T>[];
    /**
     * Implements w-ary non-adjacent form for calculating ec multiplication.
     * @param W window size
     * @param affinePoint optional 2d point to save cached precompute windows on it.
     * @param n bits
     * @returns real and fake (for const-time) points
     */
    wNAF(W: number, precomputes: T[], n: bigint): {
        p: T;
        f: T;
    };
};

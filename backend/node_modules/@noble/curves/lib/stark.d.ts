import { ProjectivePointType } from './abstract/weierstrass.js';
import * as cutils from './abstract/utils.js';
declare type ProjectivePoint = ProjectivePointType<bigint>;
export declare const starkCurve: import("./abstract/weierstrass.js").CurveFn;
declare function getPublicKey0x(privKey: Hex, isCompressed?: boolean): Uint8Array;
declare function getSharedSecret0x(privKeyA: Hex, pubKeyB: Hex): Uint8Array;
declare function sign0x(msgHash: Hex, privKey: Hex, opts?: any): import("./abstract/weierstrass.js").SignatureType;
declare function verify0x(signature: Hex, msgHash: Hex, pubKey: Hex): boolean;
declare const CURVE: Readonly<{
    readonly nBitLength: number;
    readonly nByteLength: number;
    readonly Fp: import("./abstract/modular.js").Field<bigint>;
    readonly n: bigint;
    readonly h: bigint;
    readonly hEff?: bigint | undefined;
    readonly Gx: bigint;
    readonly Gy: bigint;
    readonly wrapPrivateKey?: boolean | undefined;
    readonly allowInfinityPoint?: boolean | undefined;
    readonly a: bigint;
    readonly b: bigint;
    readonly normalizePrivateKey?: ((key: cutils.PrivKey) => cutils.PrivKey) | undefined;
    readonly endo?: {
        beta: bigint;
        splitScalar: (k: bigint) => {
            k1neg: boolean;
            k1: bigint;
            k2neg: boolean;
            k2: bigint;
        };
    } | undefined;
    readonly isTorsionFree?: ((c: import("./abstract/weierstrass.js").ProjectiveConstructor<bigint>, point: ProjectivePointType<bigint>) => boolean) | undefined;
    readonly clearCofactor?: ((c: import("./abstract/weierstrass.js").ProjectiveConstructor<bigint>, point: ProjectivePointType<bigint>) => ProjectivePointType<bigint>) | undefined;
    readonly htfDefaults?: import("./abstract/hash-to-curve.js").htfOpts | undefined;
    readonly mapToCurve?: ((scalar: bigint[]) => {
        x: bigint;
        y: bigint;
    }) | undefined;
    lowS: boolean;
    readonly hash: cutils.CHash;
    readonly hmac: (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;
    readonly randomBytes: (bytesLength?: number | undefined) => Uint8Array;
    readonly truncateHash?: ((hash: Uint8Array, truncateOnly?: boolean | undefined) => bigint) | undefined;
}>, Point: import("./abstract/weierstrass.js").PointConstructor<bigint>, ProjectivePoint: import("./abstract/weierstrass.js").ProjectiveConstructor<bigint>, Signature: import("./abstract/weierstrass.js").SignatureConstructor;
export declare const utils: {
    _bigintToBytes: (num: bigint) => Uint8Array;
    _bigintToString: (num: bigint) => string;
    _normalizePrivateKey: (key: cutils.PrivKey) => bigint;
    _normalizePublicKey: (publicKey: import("./abstract/weierstrass.js").PubKey) => import("./abstract/weierstrass.js").PointType<bigint>;
    _isWithinCurveOrder: (num: bigint) => boolean;
    _isValidFieldElement: (num: bigint) => boolean;
    _weierstrassEquation: (x: bigint) => bigint;
    isValidPrivateKey(privateKey: cutils.PrivKey): boolean;
    hashToPrivateKey: (hash: cutils.Hex) => Uint8Array;
    randomPrivateKey: () => Uint8Array;
};
export { CURVE, Point, Signature, ProjectivePoint, getPublicKey0x as getPublicKey, getSharedSecret0x as getSharedSecret, sign0x as sign, verify0x as verify, };
export declare const bytesToHexEth: (uint8a: Uint8Array) => string;
export declare const strip0x: (hex: string) => string;
export declare const numberToHexEth: (num: bigint | number) => string;
declare type Hex = Uint8Array | string;
export declare function grindKey(seed: Hex): string;
export declare function getStarkKey(privateKey: Hex): string;
export declare function ethSigToPrivate(signature: string): string;
export declare function getAccountPath(layer: string, application: string, ethereumAddress: string, index: number): string;
declare type PedersenArg = Hex | bigint | number;
export declare function pedersen(x: PedersenArg, y: PedersenArg): string;
export declare function hashChain(data: PedersenArg[], fn?: typeof pedersen): PedersenArg;
export declare const computeHashOnElements: (data: PedersenArg[], fn?: typeof pedersen) => PedersenArg;
export declare const keccak: (data: Uint8Array) => bigint;

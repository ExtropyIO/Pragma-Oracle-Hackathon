import { Interface } from '@ethersproject/abi';
import { Signer } from '@ethersproject/abstract-signer';
import type { MetaTransaction } from '../../../utils/encoding';
import type { ExecutionInput, NetworkConfig } from '../../../types';
export declare class Zodiac {
    config: {
        networkConfig: NetworkConfig;
        signer: Signer;
    };
    zodiacInterface: Interface;
    constructor(opts: {
        networkConfig?: NetworkConfig;
        signer: Signer;
    });
    receiveProposal(space: string, executor: string, input?: ExecutionInput): Promise<any>;
    executeProposalTx(proposalIndex: number, executor: string, transaction: MetaTransaction): Promise<any>;
    executeProposalTxBatch(proposalIndex: number, executor: string, transactions: MetaTransaction[]): Promise<any>;
}

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StarkNetTx = void 0;
const starknet_1 = require("starknet");
const ints_sequence_1 = require("../../../utils/ints-sequence");
const encoding_1 = require("../../../utils/encoding");
const strategies_1 = require("../../../utils/strategies");
const starknet_2 = require("../../../authenticators/starknet");
const networks_1 = require("../../../networks");
const { getSelectorFromName } = starknet_1.hash;
class StarkNetTx {
    config;
    constructor(opts) {
        this.config = {
            networkConfig: networks_1.defaultNetwork,
            ...opts
        };
    }
    async getProposeCalldata(strategiesAddresses, envelope) {
        const { address, data } = envelope;
        const { strategies, executor, metadataUri, executionParams } = data.message;
        const strategiesParams = await (0, strategies_1.getStrategiesParams)('propose', strategiesAddresses, envelope.address, envelope.data.message, this.config);
        return (0, encoding_1.getProposeCalldata)(address, ints_sequence_1.IntsSequence.LEFromString(metadataUri), executor, strategies, strategiesParams, executionParams);
    }
    async getVoteCalldata(strategiesAddresses, envelope) {
        const { address, data } = envelope;
        const { strategies, proposal, choice } = data.message;
        const strategiesParams = await (0, strategies_1.getStrategiesParams)('vote', strategiesAddresses, envelope.address, envelope.data.message, this.config);
        return (0, encoding_1.getVoteCalldata)(address, proposal, choice, strategies, strategiesParams);
    }
    async propose(account, envelope) {
        const authenticator = (0, starknet_2.getAuthenticator)(envelope.data.message.authenticator, this.config.networkConfig);
        if (!authenticator) {
            throw new Error('Invalid authenticator');
        }
        const strategiesAddresses = await (0, strategies_1.getStrategies)(envelope.data.message, this.config);
        const calldata = await this.getProposeCalldata(strategiesAddresses, envelope);
        const call = authenticator.createCall(envelope, getSelectorFromName('propose'), calldata);
        const extraCalls = await (0, strategies_1.getExtraProposeCalls)(strategiesAddresses, envelope.address, envelope.data.message, this.config);
        const calls = [...extraCalls, call];
        const fee = await account.estimateFee(calls);
        return account.execute(calls, undefined, {
            maxFee: fee.suggestedMaxFee
        });
    }
    async vote(account, envelope) {
        const authenticator = (0, starknet_2.getAuthenticator)(envelope.data.message.authenticator, this.config.networkConfig);
        if (!authenticator) {
            throw new Error('Invalid authenticator');
        }
        const strategiesAddresses = await (0, strategies_1.getStrategies)(envelope.data.message, this.config);
        const calldata = await this.getVoteCalldata(strategiesAddresses, envelope);
        const call = authenticator.createCall(envelope, getSelectorFromName('vote'), calldata);
        const fee = await account.estimateFee(call);
        return account.execute(call, undefined, {
            maxFee: fee.suggestedMaxFee
        });
    }
}
exports.StarkNetTx = StarkNetTx;

import type { Account } from 'starknet';
import type { ClientOpts, ClientConfig, ExecutionInput } from '../../../types';
export declare class SpaceManager {
    config: Omit<ClientConfig, 'ethUrl'> & {
        account: Account;
        disableEstimation: boolean;
    };
    constructor(opts: Omit<ClientOpts, 'ethUrl'> & {
        account: Account;
        disableEstimation?: boolean;
    });
    execute(call: Parameters<Account['execute']>[0]): Promise<import("starknet").InvokeFunctionResponse>;
    deploySpace(params: {
        controller: string;
        votingDelay: number;
        minVotingDuration: number;
        maxVotingDuration: number;
        proposalThreshold: bigint;
        quorum: bigint;
        authenticators: string[];
        votingStrategies: string[];
        votingStrategiesParams: string[][];
        executionStrategies: string[];
        metadataUri: string;
    }): Promise<import("starknet").InvokeFunctionResponse>;
    setMetadataUri(space: string, metadataUri: string): Promise<import("starknet").InvokeFunctionResponse>;
    finalizeProposal(space: string, proposalId: number, executor: string, input?: ExecutionInput): Promise<import("starknet").InvokeFunctionResponse>;
}

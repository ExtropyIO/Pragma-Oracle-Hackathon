"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpaceManager = void 0;
const executors_1 = require("../../../executors");
const networks_1 = require("../../../networks");
const split_uint256_1 = require("../../../utils/split-uint256");
const strings_1 = require("../../../utils/strings");
const calldata_1 = require("../../../utils/encoding/calldata");
class SpaceManager {
    config;
    constructor(opts) {
        this.config = {
            networkConfig: networks_1.defaultNetwork,
            ...opts,
            disableEstimation: !!opts.disableEstimation
        };
    }
    async execute(call) {
        if (this.config.disableEstimation) {
            return this.config.account.execute(call);
        }
        const fee = await this.config.account.estimateFee(call);
        return this.config.account.execute(call, undefined, {
            maxFee: fee.suggestedMaxFee
        });
    }
    async deploySpace(params) {
        const quorum = split_uint256_1.SplitUint256.fromUint(params.quorum);
        const proposalThreshold = split_uint256_1.SplitUint256.fromUint(params.proposalThreshold);
        const metadataUriArr = (0, strings_1.strToShortStringArr)(params.metadataUri);
        const votingStrategyParamsFlat = (0, calldata_1.flatten2DArray)(params.votingStrategiesParams);
        return this.execute({
            contractAddress: this.config.networkConfig.spaceFactory,
            entrypoint: 'deploySpace',
            calldata: [
                0,
                params.votingDelay,
                params.minVotingDuration,
                params.maxVotingDuration,
                proposalThreshold.low,
                proposalThreshold.high,
                params.controller,
                quorum.low,
                quorum.high,
                params.votingStrategies.length,
                ...params.votingStrategies,
                votingStrategyParamsFlat.length,
                ...votingStrategyParamsFlat,
                params.authenticators.length,
                ...params.authenticators,
                params.executionStrategies.length,
                ...params.executionStrategies,
                metadataUriArr.length,
                ...metadataUriArr.map(v => `0x${v.toString(16)}`)
            ]
        });
    }
    async setMetadataUri(space, metadataUri) {
        const metadataUriArr = (0, strings_1.strToShortStringArr)(metadataUri);
        return this.execute({
            contractAddress: space,
            entrypoint: 'setMetadataUri',
            calldata: [metadataUriArr.length, ...metadataUriArr.map(v => `0x${v.toString(16)}`)]
        });
    }
    async finalizeProposal(space, proposalId, executor, input) {
        const { executionParams } = (0, executors_1.getExecutionData)(executor, this.config.networkConfig, input);
        return this.execute({
            contractAddress: space,
            entrypoint: 'finalizeProposal',
            calldata: [proposalId, executionParams.length, ...executionParams]
        });
    }
}
exports.SpaceManager = SpaceManager;

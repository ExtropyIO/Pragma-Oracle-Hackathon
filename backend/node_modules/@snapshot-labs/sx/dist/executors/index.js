"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getExecutionData = exports.getEvmExecutionData = void 0;
const starknet_1 = __importDefault(require("./starknet"));
const vanilla_1 = __importDefault(require("./vanilla"));
const ethRelayer_1 = __importDefault(require("./ethRelayer"));
const avatar_1 = __importDefault(require("./avatar"));
function getEvmExecutionData(type, executorAddress, input) {
    if (type === 'SimpleQuorumVanilla') {
        return (0, vanilla_1.default)().getExecutionData(executorAddress);
    }
    if (['SimpleQuorumAvatar', 'SimpleQuorumTimelock'].includes(type) && input?.transactions) {
        return (0, avatar_1.default)().getExecutionData(executorAddress, input.transactions);
    }
    throw new Error(`Not enough data to create execution for executor ${executorAddress}`);
}
exports.getEvmExecutionData = getEvmExecutionData;
function getExecutionData(executorAddress, networkConfig, input) {
    const executor = networkConfig.executors[executorAddress];
    if (!executor)
        throw new Error(`Unknown executor ${executorAddress}`);
    if (executor.type === 'starknet' && input?.calls) {
        return (0, starknet_1.default)().getExecutionData(executorAddress, input?.calls);
    }
    if (executor.type === 'ethRelayer' && input?.transactions) {
        return (0, ethRelayer_1.default)(executor.params).getExecutionData(executorAddress, input.transactions);
    }
    if (executor.type === 'vanilla') {
        return (0, vanilla_1.default)().getExecutionData(executorAddress);
    }
    if (executor.type === 'avatar' && input?.transactions) {
        return (0, avatar_1.default)().getExecutionData(executorAddress, input.transactions);
    }
    throw new Error(`Not enough data to create execution for executor ${executorAddress}`);
}
exports.getExecutionData = getExecutionData;

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const register_1 = require("../register");
class Model {
    tableName;
    values = new Map();
    valuesImplicitlySet = new Set();
    exists = false;
    constructor(tableName) {
        this.tableName = tableName;
    }
    async _update() {
        const diff = Object.fromEntries([...this.values.entries()].filter(([key]) => this.valuesImplicitlySet.has(key)));
        return register_1.register.getKnex().table(this.tableName).update(diff).where('id', this.get('id'));
    }
    async _insert() {
        const entity = Object.fromEntries(this.values.entries());
        return register_1.register.getKnex().table(this.tableName).insert(entity);
    }
    async _delete() {
        return register_1.register.getKnex().table(this.tableName).where('id', this.get('id')).delete();
    }
    setExists() {
        this.exists = true;
    }
    initialSet(key, value) {
        this.values.set(key, value);
    }
    get(key) {
        return this.values.get(key) || null;
    }
    set(key, value) {
        this.values.set(key, value);
        this.valuesImplicitlySet.add(key);
    }
    static async loadEntity(tableName, id) {
        const knex = register_1.register.getKnex();
        const entity = await knex.table(tableName).select('*').where('id', id).first();
        if (!entity)
            return null;
        return entity;
    }
    async save() {
        if (this.exists)
            return this._update();
        return this._insert();
    }
    async delete() {
        if (this.exists)
            this._delete();
    }
}
exports.default = Model;

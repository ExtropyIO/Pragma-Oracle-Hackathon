/// <reference types="node" />
import { GraphQLObjectType, GraphQLSchema } from 'graphql';
import { ResolverContextInput } from './resolvers';
/**
 * Creates getLoader function that will return existing, or create a new dataloader
 * for specific entity.
 * createGetLoader should be called per-request so each request has its own caching
 * and batching.
 */
export declare const createGetLoader: (context: ResolverContextInput) => (name: string, field?: string) => any;
/**
 * Creates an graphql http handler for the query passed a parameters.
 * Returned middleware can be used with express.
 */
export default function get(schema: GraphQLSchema, context: ResolverContextInput, sampleQuery?: string): (request: import("http").IncomingMessage & {
    url: string;
}, response: import("http").ServerResponse<import("http").IncomingMessage> & {
    json?: ((data: unknown) => void) | undefined;
}) => Promise<void>;
/**
 * This objects name and field maps to the values of the _metadata
 * database store
 *
 */
export declare const MetadataGraphQLObject: GraphQLObjectType<any, any>;
/**
 * This objects name and field maps to the values of the _checkpoints
 * database store. And is used to generate entity queries for graphql
 *
 */
export declare const CheckpointsGraphQLObject: GraphQLObjectType<any, any>;

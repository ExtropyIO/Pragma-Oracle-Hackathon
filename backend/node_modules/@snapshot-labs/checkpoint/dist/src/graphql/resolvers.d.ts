import { GraphQLResolveInfo } from 'graphql';
import { Knex } from 'knex';
import { Pool as PgPool } from 'pg';
import { AsyncMySqlPool } from '../mysql';
import { Logger } from '../utils/logger';
import type DataLoader from 'dataloader';
export type ResolverContextInput = {
    log: Logger;
    knex: Knex;
    mysql: AsyncMySqlPool;
    pg: PgPool;
};
export type ResolverContext = ResolverContextInput & {
    getLoader: (name: string, field?: string) => DataLoader<readonly unknown[], any>;
};
export declare function queryMulti(parent: any, args: any, context: ResolverContext, info: any): Promise<{
    [x: string]: any;
}[]>;
export declare function querySingle(parent: any, args: any, context: ResolverContext, info: GraphQLResolveInfo): Promise<{
    [x: string]: any;
}>;
export declare const getNestedResolver: (columnName: string) => (parent: any, args: any, context: ResolverContext, info: GraphQLResolveInfo) => Promise<any>;

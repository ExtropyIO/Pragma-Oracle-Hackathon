"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.codegen = exports.getJSType = exports.getBaseType = exports.getInitialValue = exports.getTypeInfo = void 0;
const graphql_1 = require("graphql");
const pluralize_1 = __importDefault(require("pluralize"));
const controller_1 = require("./graphql/controller");
const graphql_2 = require("./utils/graphql");
const DEFAULT_DECIMAL_TYPES = {
    Decimal: {
        p: 10,
        d: 2
    },
    BigDecimal: {
        p: 20,
        d: 8
    }
};
const getTypeInfo = (type, decimalTypes = DEFAULT_DECIMAL_TYPES) => {
    if (type instanceof graphql_1.GraphQLNonNull) {
        throw new Error('Type must raw type');
    }
    switch (type) {
        case graphql_1.GraphQLInt:
        case graphql_1.GraphQLFloat:
            return { type: 'number', initialValue: 0 };
        case graphql_1.GraphQLString:
        case graphql_1.GraphQLID:
            return { type: 'string', initialValue: '' };
    }
    if (type instanceof graphql_1.GraphQLScalarType) {
        switch (type.name) {
            case 'BigInt':
                return { type: 'bigint', initialValue: 0 };
            case 'Boolean':
                return { type: 'boolean', initialValue: false };
            case 'Text':
                return { type: 'string', initialValue: '' };
        }
        if (type.name in decimalTypes) {
            return { type: 'string', initialValue: '0' };
        }
    }
    if (type instanceof graphql_1.GraphQLObjectType) {
        return { type: 'string', initialValue: '' };
    }
    if (type instanceof graphql_1.GraphQLList) {
        const nonNullNestedType = type.ofType instanceof graphql_1.GraphQLNonNull ? type.ofType.ofType : type.ofType;
        return { type: `${(0, exports.getTypeInfo)(nonNullNestedType, decimalTypes).type}[]`, initialValue: [] };
    }
    throw new Error('Unknown type');
};
exports.getTypeInfo = getTypeInfo;
const getInitialValue = (type, decimalTypes = DEFAULT_DECIMAL_TYPES) => {
    if (!(type instanceof graphql_1.GraphQLNonNull)) {
        return null;
    }
    return (0, exports.getTypeInfo)(type.ofType, decimalTypes).initialValue;
};
exports.getInitialValue = getInitialValue;
const getBaseType = (type, decimalTypes = DEFAULT_DECIMAL_TYPES) => {
    const nonNullType = type instanceof graphql_1.GraphQLNonNull ? type.ofType : type;
    return (0, exports.getTypeInfo)(nonNullType, decimalTypes).type;
};
exports.getBaseType = getBaseType;
const getJSType = (field, decimalTypes = DEFAULT_DECIMAL_TYPES) => {
    const nonNullType = field.type instanceof graphql_1.GraphQLNonNull ? field.type.ofType : field.type;
    const isNullable = !(field.type instanceof graphql_1.GraphQLNonNull);
    const isList = nonNullType instanceof graphql_1.GraphQLList;
    const baseType = (0, exports.getBaseType)(nonNullType, decimalTypes);
    return { isNullable, isList, baseType };
};
exports.getJSType = getJSType;
const codegen = (schema, config, format) => {
    const decimalTypes = config.decimal_types || DEFAULT_DECIMAL_TYPES;
    const extendedSchema = (0, graphql_2.extendSchema)(schema);
    const controller = new controller_1.GqlEntityController(extendedSchema, config);
    const preamble = `import { Model } from '@snapshot-labs/checkpoint';\n\n`;
    let contents = `${preamble}`;
    controller.schemaObjects.forEach((type, i, arr) => {
        const modelName = type.name;
        contents += `export class ${modelName} extends Model {\n`;
        contents += `  static tableName = '${(0, pluralize_1.default)(modelName.toLowerCase())}';\n\n`;
        contents += format === 'javascript' ? `  constructor(id) {\n` : `  constructor(id: string) {\n`;
        contents += `    super(${modelName}.tableName);\n\n`;
        controller.getTypeFields(type).forEach(field => {
            const fieldType = field.type instanceof graphql_1.GraphQLNonNull ? field.type.ofType : field.type;
            if ((0, graphql_1.isListType)(fieldType) && fieldType.ofType instanceof graphql_1.GraphQLObjectType) {
                return;
            }
            const rawInitialValue = (0, exports.getInitialValue)(field.type, decimalTypes);
            const initialValue = field.name === 'id' ? 'id' : JSON.stringify(rawInitialValue);
            contents += `    this.initialSet('${field.name}', ${initialValue});\n`;
        });
        contents += `  }\n\n`;
        contents +=
            format === 'javascript'
                ? `  static async loadEntity(id) {\n`
                : `  static async loadEntity(id: string): Promise<${modelName} | null> {\n`;
        contents += `    const entity = await super.loadEntity(${modelName}.tableName, id);\n`;
        contents += `    if (!entity) return null;\n\n`;
        contents += `    const model = new ${modelName}(id);\n`;
        contents += `    model.setExists();\n\n`;
        contents += `    for (const key in entity) {\n`;
        contents += `      model.set(key, entity[key]);\n`;
        contents += `    }\n\n`;
        contents += `    return model;\n`;
        contents += `  }\n\n`;
        controller.getTypeFields(type).forEach(field => {
            const fieldType = field.type instanceof graphql_1.GraphQLNonNull ? field.type.ofType : field.type;
            if ((0, graphql_1.isListType)(fieldType) && fieldType.ofType instanceof graphql_1.GraphQLObjectType) {
                return;
            }
            const { isNullable, isList, baseType } = (0, exports.getJSType)(field, decimalTypes);
            const typeAnnotation = isNullable ? `${baseType} | null` : baseType;
            contents +=
                format === 'javascript'
                    ? `  get ${field.name}() {\n`
                    : `  get ${field.name}(): ${typeAnnotation} {\n`;
            contents += `    return ${isList ? `JSON.parse(this.get('${field.name}'))` : `this.get('${field.name}')`};\n`;
            contents += `  }\n\n`;
            contents +=
                format === 'javascript'
                    ? `  set ${field.name}(value) {\n`
                    : `  set ${field.name}(value: ${typeAnnotation}) {\n`;
            contents += `    this.set('${field.name}', ${isList ? `JSON.stringify(value)` : 'value'});\n`;
            contents += `  }\n\n`;
        });
        contents = contents.slice(0, -1);
        contents += i === arr.length - 1 ? '}\n' : '}\n\n';
    });
    return contents;
};
exports.codegen = codegen;

#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const promises_1 = __importDefault(require("fs/promises"));
const process_1 = __importDefault(require("process"));
const yargs_1 = __importDefault(require("yargs/yargs"));
const helpers_1 = require("yargs/helpers");
const codegen_1 = require("../codegen");
const DEFAULT_CONFIG_PATH = 'src/config.json';
const DEFAULT_SCHEMA_PATH = 'src/schema.gql';
const OUTPUT_DIRECTORY = '.checkpoint';
async function generate(schemaFile, configFile, format) {
    var _a;
    if (format !== 'typescript' && format !== 'javascript') {
        throw new Error('Invalid output format');
    }
    console.log('Generating models from schema:', schemaFile);
    const cwd = process_1.default.cwd();
    const schemaFilePath = path_1.default.join(cwd, schemaFile);
    const configFilePath = path_1.default.join(cwd, configFile);
    const schema = await promises_1.default.readFile(schemaFilePath, 'utf8');
    const config = await (_a = configFilePath, Promise.resolve().then(() => __importStar(require(_a))));
    const generatedModels = (0, codegen_1.codegen)(schema, config, format);
    const outputFile = format === 'typescript' ? 'models.ts' : 'models.js';
    const outputPath = path_1.default.join(OUTPUT_DIRECTORY, outputFile);
    await promises_1.default.mkdir(path_1.default.join(cwd, OUTPUT_DIRECTORY), { recursive: true });
    await promises_1.default.writeFile(path_1.default.join(cwd, outputPath), generatedModels);
    console.log('Models generated to', outputPath);
}
(0, yargs_1.default)((0, helpers_1.hideBin)(process_1.default.argv))
    .command('generate', 'generate models from schema', yargs => {
    return yargs
        .option('schema-file', {
        alias: 's',
        type: 'string',
        default: DEFAULT_SCHEMA_PATH,
        description: 'Schema file path'
    })
        .option('config-file', {
        alias: 'c',
        type: 'string',
        default: DEFAULT_CONFIG_PATH,
        description: 'Config file path'
    })
        .option('output-format', {
        alias: 'f',
        type: 'string',
        default: 'typescript',
        description: 'Output format (typescript or javascript)'
    });
}, async (argv) => {
    try {
        await generate(argv['schema-file'], argv['config-file'], argv['output-format']);
    }
    catch (err) {
        console.error('Error generating models:', err);
        process_1.default.exit(1);
    }
})
    .demandCommand(1, 'You need to specify a command')
    .parse();

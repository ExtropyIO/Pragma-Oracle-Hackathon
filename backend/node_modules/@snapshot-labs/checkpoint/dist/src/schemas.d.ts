import { z } from 'zod';
export declare const contractEventConfigSchema: z.ZodObject<{
    name: z.ZodString;
    fn: z.ZodString;
}, "strip", z.ZodTypeAny, {
    name: string;
    fn: string;
}, {
    name: string;
    fn: string;
}>;
export declare const contractSourceConfigSchema: z.ZodObject<{
    contract: z.ZodString;
    abi: z.ZodOptional<z.ZodString>;
    start: z.ZodNumber;
    deploy_fn: z.ZodOptional<z.ZodString>;
    events: z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        fn: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        fn: string;
    }, {
        name: string;
        fn: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    start: number;
    contract: string;
    events: {
        name: string;
        fn: string;
    }[];
    abi?: string | undefined;
    deploy_fn?: string | undefined;
}, {
    start: number;
    contract: string;
    events: {
        name: string;
        fn: string;
    }[];
    abi?: string | undefined;
    deploy_fn?: string | undefined;
}>;
export declare const contractTemplateSchema: z.ZodObject<{
    abi: z.ZodOptional<z.ZodString>;
    events: z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        fn: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        fn: string;
    }, {
        name: string;
        fn: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    events: {
        name: string;
        fn: string;
    }[];
    abi?: string | undefined;
}, {
    events: {
        name: string;
        fn: string;
    }[];
    abi?: string | undefined;
}>;
export declare const checkpointConfigSchema: z.ZodObject<{
    network_node_url: z.ZodString;
    optimistic_indexing: z.ZodOptional<z.ZodBoolean>;
    decimal_types: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        p: z.ZodNumber;
        d: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        p: number;
        d: number;
    }, {
        p: number;
        d: number;
    }>>>;
    start: z.ZodOptional<z.ZodNumber>;
    tx_fn: z.ZodOptional<z.ZodString>;
    global_events: z.ZodOptional<z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        fn: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        fn: string;
    }, {
        name: string;
        fn: string;
    }>, "many">>;
    sources: z.ZodOptional<z.ZodArray<z.ZodObject<{
        contract: z.ZodString;
        abi: z.ZodOptional<z.ZodString>;
        start: z.ZodNumber;
        deploy_fn: z.ZodOptional<z.ZodString>;
        events: z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            fn: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            fn: string;
        }, {
            name: string;
            fn: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        start: number;
        contract: string;
        events: {
            name: string;
            fn: string;
        }[];
        abi?: string | undefined;
        deploy_fn?: string | undefined;
    }, {
        start: number;
        contract: string;
        events: {
            name: string;
            fn: string;
        }[];
        abi?: string | undefined;
        deploy_fn?: string | undefined;
    }>, "many">>;
    templates: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        abi: z.ZodOptional<z.ZodString>;
        events: z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            fn: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            fn: string;
        }, {
            name: string;
            fn: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        events: {
            name: string;
            fn: string;
        }[];
        abi?: string | undefined;
    }, {
        events: {
            name: string;
            fn: string;
        }[];
        abi?: string | undefined;
    }>>>;
}, "strip", z.ZodTypeAny, {
    network_node_url: string;
    optimistic_indexing?: boolean | undefined;
    decimal_types?: Record<string, {
        p: number;
        d: number;
    }> | undefined;
    start?: number | undefined;
    tx_fn?: string | undefined;
    global_events?: {
        name: string;
        fn: string;
    }[] | undefined;
    sources?: {
        start: number;
        contract: string;
        events: {
            name: string;
            fn: string;
        }[];
        abi?: string | undefined;
        deploy_fn?: string | undefined;
    }[] | undefined;
    templates?: Record<string, {
        events: {
            name: string;
            fn: string;
        }[];
        abi?: string | undefined;
    }> | undefined;
}, {
    network_node_url: string;
    optimistic_indexing?: boolean | undefined;
    decimal_types?: Record<string, {
        p: number;
        d: number;
    }> | undefined;
    start?: number | undefined;
    tx_fn?: string | undefined;
    global_events?: {
        name: string;
        fn: string;
    }[] | undefined;
    sources?: {
        start: number;
        contract: string;
        events: {
            name: string;
            fn: string;
        }[];
        abi?: string | undefined;
        deploy_fn?: string | undefined;
    }[] | undefined;
    templates?: Record<string, {
        events: {
            name: string;
            fn: string;
        }[];
        abi?: string | undefined;
    }> | undefined;
}>;

"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createKnex = exports.createKnexConfig = exports.getConnectionData = void 0;
const fs_1 = __importDefault(require("fs"));
const knex_1 = __importDefault(require("knex"));
const connection_string_1 = require("connection-string");
const PROTOCOLS = {
    mysql: 'mysql',
    postgres: 'pg',
    postgresql: 'pg'
};
const EXTRA_OPTIONS = {
    mysql: {
        supportBigNumbers: true,
        bigNumberStrings: true
    }
};
function getConnectionData(connectionString) {
    const connectionConfig = new connection_string_1.ConnectionString(connectionString);
    if (!connectionConfig.protocol || !connectionConfig.hosts || !connectionConfig.path) {
        throw new Error('invalid connection string provided');
    }
    const client = PROTOCOLS[connectionConfig.protocol];
    if (!client) {
        throw new Error(`Supplied protocol ${connectionConfig.protocol} is not supported`);
    }
    const sslConfig = {};
    if (connectionConfig.params?.sslaccept === 'strict' ||
        connectionConfig.params?.ssl === 'rejectUnauthorized') {
        sslConfig.rejectUnauthorized = true;
    }
    if (connectionConfig.params?.sslmode) {
        sslConfig.sslmode = connectionConfig.params.sslmode;
    }
    if (process.env.CA_CERT) {
        sslConfig.ca = process.env.CA_CERT;
    }
    else if (process.env.CA_CERT_FILE) {
        sslConfig.ca = fs_1.default.readFileSync(process.env.CA_CERT_FILE).toString();
    }
    return {
        client,
        connection: {
            database: connectionConfig.path[0],
            user: connectionConfig.user,
            password: connectionConfig.password,
            host: connectionConfig.hosts[0].name,
            port: connectionConfig.hosts[0].port,
            ssl: Object.keys(sslConfig).length > 0 ? sslConfig : undefined,
            ...EXTRA_OPTIONS[client]
        }
    };
}
exports.getConnectionData = getConnectionData;
function createKnexConfig(connectionString) {
    return getConnectionData(connectionString);
}
exports.createKnexConfig = createKnexConfig;
function createKnex(config) {
    const parsedConfig = typeof config === 'string' ? createKnexConfig(config) : config;
    return (0, knex_1.default)(parsedConfig);
}
exports.createKnex = createKnex;
